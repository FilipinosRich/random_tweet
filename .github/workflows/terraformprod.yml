name: 'Infra using Terraform'

on:
  workflows_run:
    workflows: ["Zip Dependencies and Lambda Code"]
    branches: [main]
    types:
      - completed

permissions:
  contents: read

jobs:
  if: ${{ github.event.workflow_run.conclusion == 'success' }}
  terraform:
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_WORKSPACE: pro
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      working-directory: ./infra
      run: | 
        terraform init
        
    # Linting
    - name: Lint Terraform
      uses: actionshub/terraform-lint@main
    
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./infra
      run: terraform plan -lock-timeout=100s -input=false -out=./tfplan

    - name: Terraform Apply
      id: apply
      working-directory: ./infra
      run: terraform apply -lock-timeout=100s -auto-approve ./tfplan
